{"ast":null,"code":"","map":{"version":3,"names":[],"sources":["C:/project/project2/panic-button-alerts/client/pages/LogIn.js"],"sourcesContent":["\r\n// import React, { useState } from 'react';\r\n// import { View, Text, TextInput, Button, StyleSheet, AsyncStorage } from 'react-native';\r\n\r\n// // Import necessary dependencies (you may need to import these based on your project setup)\r\n// // Import usersCollection, jwt, and AsyncStorage\r\n\r\n// const Login = ({ navigation }) => {\r\n//   const [email, setEmail] = useState('');\r\n//   const [password, setPassword] = useState('');\r\n\r\n//   const isEmailValid = (email) => {\r\n//     // Regular expression for basic email validation\r\n//     const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n//     return emailRegex.test(email);\r\n//   };\r\n\r\n//   const handleLogin = async () => {\r\n//     try {\r\n//       // Validate email format\r\n//       if (!isEmailValid(email)) {\r\n//         console.error('Invalid email format');\r\n//         return;\r\n//       }\r\n\r\n//       // Connect to MongoDB and verify user credentials\r\n//       // Replace the next line with the actual logic for connecting to MongoDB\r\n//       // const user = await usersCollection.findOne({ email, password });\r\n//       const user = { username: 'test' }; // Example user object\r\n\r\n//       if (!user) {\r\n//         console.error('Invalid credentials');\r\n//         return;\r\n//       }\r\n\r\n//       // Create JWT token\r\n//       // Replace the next line with the actual logic for creating a JWT token\r\n//       // const token = jwt.sign({ username: user.username }, process.env.JWT_SECRET, { expiresIn: '1h' });\r\n//       const token = 'example_token'; // Example token\r\n\r\n//       // Store token in local storage and navigate to home screen\r\n//       // Replace the next line with the actual logic for storing the token\r\n//       // await AsyncStorage.setItem('token', token);\r\n//       console.log('Login successful');\r\n//       navigation.navigate('Home');\r\n//     } catch (error) {\r\n//       console.error(error.message);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <View style={styles.container}>\r\n//       <Text style={styles.header}>Login</Text>\r\n//       <TextInput\r\n//         style={styles.input}\r\n//         placeholder=\"Email\"\r\n//         onChangeText={(text) => setEmail(text)}\r\n//         value={email}\r\n//       />\r\n//       <TextInput\r\n//         style={styles.input}\r\n//         placeholder=\"Password\"\r\n//         secureTextEntry\r\n//         onChangeText={(text) => setPassword(text)}\r\n//         value={password}\r\n//       />\r\n//       <View style={{ flexDirection: 'row' }}>\r\n//         <Text style={styles.forgotPassword} onPress={() => navigation.navigate('ForgotPassword')}>\r\n//           Forgot Password?\r\n//         </Text>\r\n//         <Text style={styles.register} onPress={() => navigation.navigate('Register')}>\r\n//           Register\r\n//         </Text>\r\n//       </View>\r\n\r\n//       <Button title=\"Login\" onPress={handleLogin} />\r\n//     </View>\r\n//   );\r\n// };\r\n\r\n// const styles = StyleSheet.create({\r\n//   container: {\r\n//     flex: 1,\r\n//     justifyContent: 'center',\r\n//     alignItems: 'center',\r\n//   },\r\n//   header: {\r\n//     fontSize: 24,\r\n//     marginBottom: 20,\r\n//   },\r\n//   input: {\r\n//     width: '25%',\r\n//     height: 20,\r\n//     borderColor: 'gray',\r\n//     borderWidth: 1,\r\n//     marginBottom: 10,\r\n//     padding: 10,\r\n//   },\r\n//   forgotPassword: {\r\n//     fontSize: 16,\r\n//     color: 'blue',\r\n//     textDecorationLine: 'underline',\r\n//     marginBottom: 10,\r\n//   },\r\n//   register: {\r\n//     fontSize: 16,\r\n//     color: 'blue',\r\n//     textDecorationLine: 'underline',\r\n//     marginLeft: 20,\r\n//   },\r\n// });\r\n\r\n// export default Login;\r\n\r\n"],"mappings":""},"metadata":{},"sourceType":"script","externalDependencies":[]}