{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport axios from 'axios';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar ResetPassword = function ResetPassword(_ref) {\n  var route = _ref.route,\n    navigation = _ref.navigation;\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    password = _useState2[0],\n    setPassword = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    confirmPassword = _useState4[0],\n    setConfirmPassword = _useState4[1];\n  var handleResetPassword = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      if (!validatePassword()) {\n        return;\n      }\n      try {\n        var response = yield axios.post('YOUR_NODE_SERVER_ENDPOINT/reset-password/reset', {\n          email: route.params.email,\n          token: route.params.token,\n          password: password\n        });\n        if (response.data.success) {\n          Alert.alert('Password Reset Successful', 'You can now log in with your new password.');\n          navigation.navigate('Login');\n        } else {\n          Alert.alert('Error', 'Something went wrong. Please try again later.');\n        }\n      } catch (error) {\n        console.error('Error resetting password:', error.message);\n        Alert.alert('Error', 'An error occurred while resetting the password.');\n      }\n    });\n    return function handleResetPassword() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var validatePassword = function validatePassword() {\n    var passwordRegex = /^(?=.*[0-9])(?=.*[!@#$%^&*])(.{8,})$/;\n    if (!passwordRegex.test(password)) {\n      Alert.alert('Invalid Password', 'Password must be at least 8 characters long and contain at least one number and one special character.');\n      return false;\n    }\n    if (password !== confirmPassword) {\n      Alert.alert('Password Mismatch', 'Passwords do not match.');\n      return false;\n    }\n    return true;\n  };\n  return _jsxs(View, {\n    children: [_jsx(TextInput, {\n      placeholder: \"Enter New Password\",\n      secureTextEntry: true,\n      value: password,\n      onChangeText: function onChangeText(text) {\n        return setPassword(text);\n      }\n    }), _jsx(TextInput, {\n      placeholder: \"Confirm New Password\",\n      secureTextEntry: true,\n      value: confirmPassword,\n      onChangeText: function onChangeText(text) {\n        return setConfirmPassword(text);\n      }\n    }), _jsx(Button, {\n      title: \"Reset Password\",\n      onPress: handleResetPassword\n    })]\n  });\n};\nexport default ResetPassword;","map":{"version":3,"names":["React","useState","View","TextInput","Button","Alert","axios","jsx","_jsx","jsxs","_jsxs","ResetPassword","_ref","route","navigation","_useState","_useState2","_slicedToArray","password","setPassword","_useState3","_useState4","confirmPassword","setConfirmPassword","handleResetPassword","_ref2","_asyncToGenerator","validatePassword","response","post","email","params","token","data","success","alert","navigate","error","console","message","apply","arguments","passwordRegex","test","children","placeholder","secureTextEntry","value","onChangeText","text","title","onPress"],"sources":["C:/project2/panic-button-alerts/client/components/forgetPassword/ResetPassword.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { View, TextInput, Button, Alert } from 'react-native';\r\nimport axios from 'axios';\r\n\r\nconst ResetPassword = ({ route, navigation }) => {\r\n  const [password, setPassword] = useState('');\r\n  const [confirmPassword, setConfirmPassword] = useState('');\r\n\r\n  const handleResetPassword = async () => {\r\n    if (!validatePassword()) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Send a request to the server to reset the password\r\n      const response = await axios.post('YOUR_NODE_SERVER_ENDPOINT/reset-password/reset', {\r\n        email: route.params.email,\r\n        token: route.params.token,\r\n        password,\r\n      });\r\n\r\n      if (response.data.success) {\r\n        Alert.alert('Password Reset Successful', 'You can now log in with your new password.');\r\n        navigation.navigate('Login'); // Redirect to login page after successful password reset\r\n      } else {\r\n        Alert.alert('Error', 'Something went wrong. Please try again later.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error resetting password:', error.message);\r\n      Alert.alert('Error', 'An error occurred while resetting the password.');\r\n    }\r\n  };\r\n\r\n  const validatePassword = () => {\r\n    // Password should be at least 8 characters long and contain at least one number and one special character\r\n    const passwordRegex = /^(?=.*[0-9])(?=.*[!@#$%^&*])(.{8,})$/;\r\n\r\n    if (!passwordRegex.test(password)) {\r\n      Alert.alert(\r\n        'Invalid Password',\r\n        'Password must be at least 8 characters long and contain at least one number and one special character.'\r\n      );\r\n      return false;\r\n    }\r\n\r\n    if (password !== confirmPassword) {\r\n      Alert.alert('Password Mismatch', 'Passwords do not match.');\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  };\r\n\r\n  return (\r\n    <View>\r\n      <TextInput\r\n        placeholder=\"Enter New Password\"\r\n        secureTextEntry\r\n        value={password}\r\n        onChangeText={(text) => setPassword(text)}\r\n      />\r\n      <TextInput\r\n        placeholder=\"Confirm New Password\"\r\n        secureTextEntry\r\n        value={confirmPassword}\r\n        onChangeText={(text) => setConfirmPassword(text)}\r\n      />\r\n      <Button title=\"Reset Password\" onPress={handleResetPassword} />\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default ResetPassword;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}