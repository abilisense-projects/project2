{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport axios from 'axios';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar EmailReset = function EmailReset() {\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    email = _useState2[0],\n    setEmail = _useState2[1];\n  var handleSendResetEmail = function () {\n    var _ref = _asyncToGenerator(function* () {\n      if (!validateEmail()) {\n        Alert.alert('Invalid Email', 'Please enter a valid email address.');\n        return;\n      }\n      try {\n        var response = yield axios.post('YOUR_NODE_SERVER_ENDPOINT/reset-password', {\n          email: email\n        });\n        if (response.data.success) {\n          Alert.alert('Reset Email Sent', 'Please check your email for further instructions.');\n        } else {\n          Alert.alert('Error', 'Something went wrong. Please try again later.');\n        }\n      } catch (error) {\n        console.error('Error sending reset email:', error.message);\n        Alert.alert('Error', 'An error occurred while sending the reset email.');\n      }\n    });\n    return function handleSendResetEmail() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  var validateEmail = function validateEmail() {\n    var emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  };\n  return _jsxs(View, {\n    children: [_jsx(TextInput, {\n      placeholder: \"Enter Email\",\n      value: email,\n      onChangeText: function onChangeText(text) {\n        return setEmail(text);\n      }\n    }), _jsx(Button, {\n      title: \"Send Reset Email\",\n      onPress: handleSendResetEmail\n    })]\n  });\n};\nexport default EmailReset;","map":{"version":3,"names":["React","useState","View","TextInput","Button","Alert","axios","jsx","_jsx","jsxs","_jsxs","EmailReset","_useState","_useState2","_slicedToArray","email","setEmail","handleSendResetEmail","_ref","_asyncToGenerator","validateEmail","alert","response","post","data","success","error","console","message","apply","arguments","emailRegex","test","children","placeholder","value","onChangeText","text","title","onPress"],"sources":["C:/project2/panic-button-alerts/client/components/forgetPassword/EmailForm.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { View, TextInput, Button, Alert } from 'react-native';\r\nimport axios from 'axios';\r\n\r\nconst EmailReset = () => {\r\n  const [email, setEmail] = useState('');\r\n\r\n  const handleSendResetEmail = async () => {\r\n    if (!validateEmail()) {\r\n      Alert.alert('Invalid Email', 'Please enter a valid email address.');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Send a request to the server to initiate the password reset process\r\n      const response = await axios.post('YOUR_NODE_SERVER_ENDPOINT/reset-password', {\r\n        email,\r\n      });\r\n\r\n      if (response.data.success) {\r\n        Alert.alert('Reset Email Sent', 'Please check your email for further instructions.');\r\n      } else {\r\n        Alert.alert('Error', 'Something went wrong. Please try again later.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error sending reset email:', error.message);\r\n      Alert.alert('Error', 'An error occurred while sending the reset email.');\r\n    }\r\n  };\r\n\r\n  const validateEmail = () => {\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    return emailRegex.test(email);\r\n  };\r\n\r\n  return (\r\n    <View>\r\n      <TextInput\r\n        placeholder=\"Enter Email\"\r\n        value={email}\r\n        onChangeText={(text) => setEmail(text)}\r\n      />\r\n      <Button title=\"Send Reset Email\" onPress={handleSendResetEmail} />\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default EmailReset;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,SAAA;AAAA,OAAAC,MAAA;AAAA,OAAAC,KAAA;AAExC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAE1B,IAAMC,UAAU,GAAG,SAAbA,UAAUA,CAAA,EAAS;EACvB,IAAAC,SAAA,GAA0BX,QAAQ,CAAC,EAAE,CAAC;IAAAY,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA/BG,KAAK,GAAAF,UAAA;IAAEG,QAAQ,GAAAH,UAAA;EAEtB,IAAMI,oBAAoB;IAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,aAAY;MACvC,IAAI,CAACC,aAAa,CAAC,CAAC,EAAE;QACpBf,KAAK,CAACgB,KAAK,CAAC,eAAe,EAAE,qCAAqC,CAAC;QACnE;MACF;MAEA,IAAI;QAEF,IAAMC,QAAQ,SAAShB,KAAK,CAACiB,IAAI,CAAC,0CAA0C,EAAE;UAC5ER,KAAK,EAALA;QACF,CAAC,CAAC;QAEF,IAAIO,QAAQ,CAACE,IAAI,CAACC,OAAO,EAAE;UACzBpB,KAAK,CAACgB,KAAK,CAAC,kBAAkB,EAAE,mDAAmD,CAAC;QACtF,CAAC,MAAM;UACLhB,KAAK,CAACgB,KAAK,CAAC,OAAO,EAAE,+CAA+C,CAAC;QACvE;MACF,CAAC,CAAC,OAAOK,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAACE,OAAO,CAAC;QAC1DvB,KAAK,CAACgB,KAAK,CAAC,OAAO,EAAE,kDAAkD,CAAC;MAC1E;IACF,CAAC;IAAA,gBArBKJ,oBAAoBA,CAAA;MAAA,OAAAC,IAAA,CAAAW,KAAA,OAAAC,SAAA;IAAA;EAAA,GAqBzB;EAED,IAAMV,aAAa,GAAG,SAAhBA,aAAaA,CAAA,EAAS;IAC1B,IAAMW,UAAU,GAAG,4BAA4B;IAC/C,OAAOA,UAAU,CAACC,IAAI,CAACjB,KAAK,CAAC;EAC/B,CAAC;EAED,OACEL,KAAA,CAACR,IAAI;IAAA+B,QAAA,GACHzB,IAAA,CAACL,SAAS;MACR+B,WAAW,EAAC,aAAa;MACzBC,KAAK,EAAEpB,KAAM;MACbqB,YAAY,EAAE,SAAAA,aAACC,IAAI;QAAA,OAAKrB,QAAQ,CAACqB,IAAI,CAAC;MAAA;IAAC,CACxC,CAAC,EACF7B,IAAA,CAACJ,MAAM;MAACkC,KAAK,EAAC,kBAAkB;MAACC,OAAO,EAAEtB;IAAqB,CAAE,CAAC;EAAA,CAC9D,CAAC;AAEX,CAAC;AAED,eAAeN,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}