{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from \"react\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar apiKey = 'YOUR_API_KEY';\nvar apiURL = 'https://emailvalidation.abstractapi.com/v1/' + apiKey;\nvar EmailForm = function EmailForm() {\n  var _useState = useState(\"\"),\n    _useState2 = _slicedToArray(_useState, 2),\n    email = _useState2[0],\n    setEmail = _useState2[1];\n  var _useState3 = useState(\"\"),\n    _useState4 = _slicedToArray(_useState3, 2),\n    errorMessage = _useState4[0],\n    setErrorMessage = _useState4[1];\n  var sendEmailValidationRequest = function () {\n    var _ref = _asyncToGenerator(function* (email) {\n      try {\n        var response = yield fetch.get(apiURL + '&email=' + email);\n        var data = response.json();\n        return data.is_valid_format.value;\n      } catch (error) {\n        throw error;\n      }\n    });\n    return function sendEmailValidationRequest(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  var handleSubmit = function () {\n    var _ref2 = _asyncToGenerator(function* (email) {\n      try {\n        var isValid = yield sendEmailValidationRequest(email);\n        if (isValid) {\n          setErrorMessage(\"\");\n          console.log(\"SUBMITTED! \", email);\n        } else {\n          setErrorMessage(\"INVALID EMAIL.PLEASE CHECK YOUR INPUT AND TRY AGAIN.\");\n          console.log(\"EMAIL WAS INVALID.\", email);\n        }\n        return isValid;\n      } catch (error) {\n        setErrorMessage(\"SOMETHING WENT WRONG.PLEASE TRY AGAIN LATER.\");\n      }\n    });\n    return function handleSubmit(_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  return _jsxs(SafeAreaView, {\n    children: [_jsx(TextInput, {\n      style: styles.emailInput,\n      onChangeText: function onChangeText(e) {\n        return setEmail(e.target.value);\n      },\n      value: email\n    }), _jsx(TouchableHighlight, {\n      onPress: handleSubmit,\n      style: styles.button,\n      children: _jsx(Text, {\n        children: \"Submit\"\n      })\n    }), _jsx(Text, {\n      children: errorMessage\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  emailInput: {\n    width: 250,\n    height: 25,\n    borderWidth: 1,\n    borderColor: 'black'\n  },\n  button: {\n    borderWidth: 1,\n    borderColor: 'green',\n    borderRadius: 15,\n    marginTop: 25,\n    padding: 10,\n    alignItems: 'center'\n  }\n});","map":{"version":3,"names":["React","useState","TextInput","SafeAreaView","TouchableHighlight","Text","StyleSheet","jsx","_jsx","jsxs","_jsxs","apiKey","apiURL","EmailForm","_useState","_useState2","_slicedToArray","email","setEmail","_useState3","_useState4","errorMessage","setErrorMessage","sendEmailValidationRequest","_ref","_asyncToGenerator","response","fetch","get","data","json","is_valid_format","value","error","_x","apply","arguments","handleSubmit","_ref2","isValid","console","log","_x2","children","style","styles","emailInput","onChangeText","e","target","onPress","button","create","width","height","borderWidth","borderColor","borderRadius","marginTop","padding","alignItems"],"sources":["C:/project2/panic-button-alerts/client/components/forgetPassword/EmailREset.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { TextInput, SafeAreaView, TouchableHighlight, Text, StyleSheet } from \"react-native\";\r\n\r\nconst apiKey = 'YOUR_API_KEY';\r\nconst apiURL = 'https://emailvalidation.abstractapi.com/v1/' + apiKey\r\nconst EmailForm = () => {\r\n   const [email, setEmail] = useState(\"\");\r\n   const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n   const sendEmailValidationRequest = async (email) => {\r\n       try {\r\n           const response = await fetch.get(apiURL + '&email=' + email);\r\n           const data = response.json();\r\n           return data.is_valid_format.value;\r\n       } catch (error) {\r\n           throw error;\r\n       }\r\n   }\r\n   const handleSubmit = async (email) => {\r\n       try {\r\n           const isValid = await sendEmailValidationRequest(email);\r\n           if (isValid) {\r\n               setErrorMessage(\"\");\r\n               console.log(\"SUBMITTED! \", email);\r\n           } else {\r\n               setErrorMessage(\"INVALID EMAIL.PLEASE CHECK YOUR INPUT AND TRY AGAIN.\");\r\n               console.log(\"EMAIL WAS INVALID.\", email);\r\n           }\r\n           return isValid;\r\n       } catch (error) {\r\n           setErrorMessage(\"SOMETHING WENT WRONG.PLEASE TRY AGAIN LATER.\");\r\n       }\r\n   }\r\n  return (\r\n    <SafeAreaView>\r\n          <TextInput\r\n              style={styles.emailInput}\r\n          onChangeText={(e) => setEmail(e.target.value)}\r\n          value={email}\r\n      />\r\n      <TouchableHighlight onPress={handleSubmit} style={styles.button}>\r\n         <Text>Submit</Text>\r\n      </TouchableHighlight>\r\n       <Text>{errorMessage}</Text>\r\n   </SafeAreaView>\r\n  )\r\n}\r\nconst styles = StyleSheet.create({\r\n   emailInput: {\r\n       width: 250,\r\n       height: 25,\r\n     borderWidth: 1,\r\n     borderColor: 'black',\r\n   },\r\n   button: {\r\n       borderWidth: 1,\r\n       borderColor: 'green',\r\n       borderRadius: 15,\r\n       marginTop: 25,\r\n       padding: 10,\r\n       alignItems: 'center'\r\n   },\r\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}