{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport axios from 'axios';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar EmailReset = function EmailReset() {\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    email = _useState2[0],\n    setEmail = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    message = _useState4[0],\n    setMessage = _useState4[1];\n  var handleSendResetEmail = function () {\n    var _ref = _asyncToGenerator(function* () {\n      if (!validateEmail()) {\n        setMessage('Please enter a valid email address.');\n        return;\n      }\n      try {\n        var response = yield axios.post('YOUR_NODE_SERVER_ENDPOINT/reset-password', {\n          email: email\n        });\n        if (response.data.success) {\n          setMessage('Reset email sent. Check your email for further instructions.');\n        } else {\n          setMessage('User not found. Please check your email address.');\n        }\n      } catch (error) {\n        console.error('Error sending reset email:', error.message);\n        setMessage('An error occurred while sending the reset email.');\n      }\n    });\n    return function handleSendResetEmail() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  var validateEmail = function validateEmail() {\n    var emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  };\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(TextInput, {\n      style: styles.input,\n      placeholder: \"Enter Email\",\n      value: email,\n      onChangeText: function onChangeText(text) {\n        return setEmail(text);\n      }\n    }), _jsx(Button, {\n      title: \"Send Reset Email\",\n      onPress: handleSendResetEmail\n    }), message ? _jsx(Text, {\n      style: styles.message,\n      children: message\n    }) : null]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 20\n  },\n  input: {\n    height: 40,\n    width: '100%',\n    borderColor: 'gray',\n    borderWidth: 1,\n    marginBottom: 20,\n    padding: 10\n  },\n  message: {\n    marginTop: 20,\n    color: 're'\n  }\n});\nexport default EmailReset;","map":{"version":3,"names":["React","useState","View","TextInput","Button","Text","StyleSheet","axios","jsx","_jsx","jsxs","_jsxs","EmailReset","_useState","_useState2","_slicedToArray","email","setEmail","_useState3","_useState4","message","setMessage","handleSendResetEmail","_ref","_asyncToGenerator","validateEmail","response","post","data","success","error","console","apply","arguments","emailRegex","test","style","styles","container","children","input","placeholder","value","onChangeText","text","title","onPress","create","flex","justifyContent","alignItems","padding","height","width","borderColor","borderWidth","marginBottom","marginTop","color"],"sources":["C:/project2/panic-button-alerts/client/components/forgetPassword/EmailReset.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { View, TextInput, Button, Text, StyleSheet } from 'react-native';\r\nimport axios from 'axios';\r\n\r\nconst EmailReset = () => {\r\n  const [email, setEmail] = useState('');\r\n  const [message, setMessage] = useState('');\r\n\r\n  const handleSendResetEmail = async () => {\r\n    if (!validateEmail()) {\r\n      setMessage('Please enter a valid email address.');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Send a request to the server to initiate the password reset process\r\n      const response = await axios.post('YOUR_NODE_SERVER_ENDPOINT/reset-password', {\r\n        email,\r\n      });\r\n\r\n      if (response.data.success) {\r\n        setMessage('Reset email sent. Check your email for further instructions.');\r\n      } else {\r\n        setMessage('User not found. Please check your email address.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error sending reset email:', error.message);\r\n      setMessage('An error occurred while sending the reset email.');\r\n    }\r\n  };\r\n\r\n  const validateEmail = () => {\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    return emailRegex.test(email);\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <TextInput\r\n        style={styles.input}\r\n        placeholder=\"Enter Email\"\r\n        value={email}\r\n        onChangeText={(text) => setEmail(text)}\r\n      />\r\n      <Button title=\"Send Reset Email\" onPress={handleSendResetEmail} />\r\n      {message ? <Text style={styles.message}>{message}</Text> : null}\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    padding: 20,\r\n  },\r\n  input: {\r\n    height: 40,\r\n    width: '100%',\r\n    borderColor: 'gray',\r\n    borderWidth: 1,\r\n    marginBottom: 20,\r\n    padding: 10,\r\n  },\r\n  message: {\r\n    marginTop: 20,\r\n    color: 're', // You can customize the color\r\n  },\r\n});\r\n\r\nexport default EmailReset;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}